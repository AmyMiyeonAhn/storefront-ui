@import "../variables";

$button-padding: 1rem 2.5rem !default;
$button-padding-desktop: 0.9375rem 2.5rem !default;
$button-color: $c-on-dark !default;
$button-background-color: $c-primary !default;
$button-font-family: $body-font-family-secondary !default;
$button-font-size: $font-size-small-mobile !default;
$button-font-size-desktop: $font-size-small-desktop !default;
$button-font-weight: $body-font-weight-secondary !default;
$button-line-height: 1.6 !default;
$button--outline-border: 2px !default;

.sf-button {
  padding: $button-padding;
  border: 0;
  outline: 0;
  color: $button-color;
  background-color: $button-background-color;
  font-family: $button-font-family;
  font-size: $button-font-size;
  font-weight: $button-font-weight;
  line-height: $button-line-height;
  transition: background-color 150ms linear, color 150ms linear;
  text-transform: $button-text-transform; // New variables
  border-radius: $button-border-radius; // New property & New variables
  cursor: pointer;
  @media screen and (min-width: $desktop-min) {
    padding: $button-padding;
    font-size: $button-font-size-desktop;
  }
  &:hover {
    background-color: lighten($button-background-color, 5);
  }
  &--full-width {
    width: 100%;
  }
  &--outline {
    padding: $button__outline-padding; // New property & new variables
    color: $button__outline-color;
    border: solid $button--outline-border $button__outline-border-color; // New variables
    background-color: transparent !important;
    &:hover {
      background-color: $button__outline-hover-background-color !important; // New variables
      color: $button__outline-hover-color !important; // New variables
    }
    @each $color, $map in $colors-map {
      $bg: map-get($map, "bg");
      $variant: map-get($map, "variant");
      $text: map-get($map, "text");
      &.color-#{$color} {
        color: $bg !important;
        border: solid $button--outline-border $bg;
        &:hover {
          background-color: $variant !important;
          color: $text !important;
        }
      }
    }
  }
  &--text {
    padding: 0;
    margin: 0;
    background-color: transparent;
    color: $button__text-color; // New variables
    text-transform: none;
    text-decoration: $button__text-text-decoration;
    &:hover {
      background-color: transparent;
      text-decoration: $button__text-hover-text-decoration;
    }
    @each $color, $map in $colors-map {
      $text: map-get($map, "bg");
      &.color-#{$color} {
        color: $text !important;
        background-color: transparent !important;
        &:hover {
          background-color: transparent !important;
        }
      }
    }
  }

  &:disabled {
    background-color: $c-light;
    color: $c-gray;
    cursor: default;
    transition: background-color 150ms linear, color 150ms linear;
    &:hover {
      background-color: $c-light;
      color: $c-gray;
    }
  }

  // LC Customised CSS modifiers (not in use)

  &--bg-orange{
    background-color: $_c-crafts-orange;
  }

  &--l{
    padding: 0 24px;
    min-height: 48px;
    font-size: $font-size-extra-big-desktop;
    @media screen and (min-width: $desktop-min) {
      padding: 0 24px;
      font-size: $font-size-extra-big-desktop;
    }
  }

  &--s{
    padding: 0 18px;
    min-height: 32px;
    font-size: $font-size-small-desktop;
    @media screen and (min-width: $desktop-min) {
      padding: 0 18px;
      font-size: $font-size-small-desktop;
    }
  }
  
}